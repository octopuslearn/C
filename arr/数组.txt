int arr1[3] = { 1,2,3 };	完全初始化：将所有元素初始化
int arr2[3] = { 0 };		完全初始化：只初始化一部分，例如只初始化第一个元素，其余的元素默认为0
//注意：								这和int arr2[3]={0,0,0};将所有元素初始化为0不同


char ch1[5] = { 'a','b','c' };	//字符数组
char ch2[] = { 'a','b','c' };


ASCII码值0表示空字符，即'\0'
char ch3[5] = "bit";	//字符串只能存在字符数组中			//前4个可以确定'b','i','t','\0',最后一个是不完全初始化'\0' 


printf("%s\n",ch4);		//print打印找到'\0'才会停止
//	//ch4和ch5开辟空间，ch4只知道b i t \0,ch5只知道b i t，ch4和ch5都不知道相应的前后到底有啥
//	char ch4[] = "bit";
//	char ch5[] = { 'b','i','t' };	
//
//	printf("%s\n",ch4);
//	printf("%s\n", ch5);	//找到'\0'后停止打印，所以有烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫贴 - 蟷 ?
//	//bit
//	//bit烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫贴 - 蟷 ?
//
//	printf("%d\n", strlen(ch4));
//	printf("%d\n", strlen(ch5));	//由于没有找到'\0',所以strlen算出的数组长度是随机的
//	//3
//	//42	






数组地址是连续的，地址从低到高
printf("&arr[%d]=%p\n",i, &arr[i]);	//%p-按地址的格式打印-十六进制的打印



注意二维数组的使用
/*注意二维数组有个&*/
int* p = &arr3[0][0];




数组名是？
数组名是首个元素地址，除了sizeof(数组名),&数组名
1.sizeof(数组名)-表示整个元素的大小
2.&数组名，表示整个元素的地址

	printf("%p\n", &arr3[0]);	
	printf("%p\n", &arr3);	//&表示整个数组的地址
	printf("%p\n", arr3);	//数组名是首个元素的地址
	//	0000005658CFF7D8
	//	0000005658CFF7D8
	//	0000005658CFF7D8
	//	0000005658CFF7D8
	printf("\n");

	printf("%p\n", &arr3);	//&表示整个数组的地址
	printf("%p\n", &arr3+1);//&表示整个数组的地址
	printf("%p\n", arr3);	//数组名是首个元素的地址
	printf("%p\n", arr3+1);	//数组名是首个元素的地址
	//	000000AB3DEFFC88	//+40
	//	000000AB3DEFFCB0
	//	000000AB3DEFFC88	//+4
	//	000000AB3DEFFC8C
	
	
	
	
	
	
	
	
冒泡排序法：每两个进行比较，将大的后移
//n个元素，要n-1轮，每轮要比较n-2次

如：
int i = 0;
int sz = sizeof(arr) / sizeof(arr[0]);
for(i=0;i<sz-1;i++)	//轮数
{
	int j = 0;
	for(j=0;j<sz-1;j++)	//每轮比较次数
	{
		if(arr[j]>arr[j+1])	//将大的后移
		{
			int tmp = arr[j];
			arr[j] = arr[j+1];
			arr[j+1] = tmp;
		}
	}
}